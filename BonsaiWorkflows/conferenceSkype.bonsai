<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.3.0">
  <Workflow xmlns:q2="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:q3="clr-namespace:Bonsai.IO;assembly=Bonsai.System" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:q5="clr-namespace:Bonsai.joh.Vision;assembly=BonsaiPackage5" xmlns:q4="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision" xmlns:q6="clr-namespace:Bonsai.Shaders;assembly=Bonsai.Shaders" xmlns:q1="clr-namespace:Bonsai.uEye;assembly=Bonsai.uEye" xmlns="https://horizongir.org/bonsai">
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:uEyeCapture">
          <q1:Index>0</q1:Index>
          <q1:ConfigFile>2048x1280_30fps_slowClock_4.9.ini</q1:ConfigFile>
        </Combinator>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Image</Selector>
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Script>import clr
clr.AddReference("OpenTK")
from OpenTK import Vector2, Vector3
from System import Array, Single, Random,Tuple
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *
import math

xMax=2048.0 #relevant for openGL scaling
yMax=1280.0
allCoor=[]
oldCoor=[]
posPick=300
fr=0
posList=[]
CL=False
FlexPair=False

def correctFish(x,y,xOff,yOff,xMax,xMaxCm):

  scale=xMax/xMaxCm
  xR=x+xOff
  yR=y+yOff

  xR=xR-(scale*(xR-xMax/2.)/(105*scale))
  yR=yR-(scale*(yR-yMax/2.)/(105*scale))

  return xR-xOff,yR-yOff


def transf(x,y,hArr):

  h = Mat.FromArray(hArr, 3, 3, Depth.F64, 1)

  values1 = Array[float]([x,y])
  values2 = Array[float]([1,1])

  point = Mat.FromArray(values1, 1, 1, Depth.F64,2)
  out = Mat.FromArray(values2, 1, 1, Depth.F64,2)

  CV.PerspectiveTransform(point,out,h)

  x=out.Item[0].Val0
  y=out.Item[0].Val1

  return x,y

def toGL(c,cMax):
  return int(2*(c-cMax/2))/cMax


@returns(Tuple[str,Array[Vector3],Single,Single,str])
def process(value):
  global allCoor,xMax,yMax,oldCoor,fr,posList

  allwells=[]
  oldCoor=allCoor
  allCoor=[]
  bgCol=0
  DotCol=1
  i=0

#Item1: (zip)
#  Item1: contour
#  Item2: ROI
#  Item3: animal pair matrix
#  Item4: projector-camera calibration matrix
#Item2: (Trajector File)


  for w in range(len(value.Item1.Item1)):

    well=value.Item1.Item1[w]
    xoff=value.Item1.Item2[i].Item1
    yoff=value.Item1.Item2[i].Item2

    #Also correct dish ROI! Added 7-19-2017
    xoff,yoff = correctFish(xoff,yoff,0,0,xMax,53.)

    x = well.Centroid.X
    y = well.Centroid.Y
    o=well.Orientation

    #use previous coordinates if current coordinates are NaN
    if math.isnan(x):
      if len(oldCoor)&gt;0:
        x=oldCoor[w][0]
        y=oldCoor[w][1]
        xoff=oldCoor[w][2]
        yoff=oldCoor[w][3]
        o=oldCoor[w][4]
    else:
      x,y = correctFish(x,y,xoff,yoff,xMax,53.)



    i+=1

    welldata = ((round(x)), (round(y)), o)
    allCoor.append([x,y,xoff,yoff,o])
    wellstr = "%0.f %0.f %0.3f" % welldata
    allwells.append(wellstr)

  if CL:
    
    if fr==0:
      posList=allCoor
      fr=0
    fr+=1
    if fr==posPick:
      fr=0
    

  #add one more row, representing pre recorded trajectory, episode name and disc size for visual stimulation
  xp=value.Item2.Item2
  yp=value.Item2.Item3
  sp=value.Item2.Item4 #sprite point size
  bgCol=value.Item2.Item5
  DotCol=value.Item2.Item6


  eName=value.Item2.Item1

  welldata = ((round(xp)), (round(yp)), sp,eName)
  allCoor.append([xp,yp,xoff,yoff,sp])
  wellstr = "%0.f %0.f %0.f %s" % welldata
  allwells.append(wellstr)

  toDraw=[]

  if FlexPair:
    pairListNr=int(eName[:2])
    drawList=value.Item1.Item3[pairListNr*16:(pairListNr+1)*16]
  else:
    drawList=value.Item1.Item3 #animal pair matrix

  hArr =value.Item1.Item4 #projector-camera calibration matrix
  
  scale=xMax/53.

  drawStr=[]
  for i in range(len(allCoor)):
    p=allCoor[i] #point to be drawn (unless in skype mode, ones should only be in i=15 (last animal)
    l=drawList[i] #find where to draw it (which dish)
    for ii in range(len(l)):
      
      if l[ii]==1: #draw into dish ii

        if CL:
          o=posList[ii][4]#+math.pi
          xo=posList[ii][0]
          yo=posList[ii][1]
          
          dx=p[0]
          dy=p[1]

          dist=math.sqrt((dx**2)+(dy**2))
          if dist==0:
            dist=1
          
          phi=math.asin(dx/dist)
          

          heading=-o+(math.pi*(1/2.))
          #heading=o+(math.pi*(1/2))

          

          x=math.sin(heading+phi)*dist
          y=math.cos(heading+phi)*dist
          #print 'x',x,'y',y,'dist',dist,'phi',phi,'o',o,'heading',heading
          x=x+xo
          y=y+yo
          
          wellDiam=value.Item1.Item2[ii].Item3
          #print x,y,wellDiam
          if (x&lt;wellDiam) and (x&gt;0) and (y&lt;wellDiam) and (y&gt;0):
            x=x+allCoor[ii][2]
            y=y+allCoor[ii][3]
          else:
            #print 'not drawing dot for animal',ii
            x=0
            y=0

        else:
          x=p[0]+allCoor[ii][2] #add offsets of current dish
          y=p[1]+allCoor[ii][3]
        

        x,y=transf(x,y,hArr) ##projector-camera calibration

        x=toGL(x,xMax)
        y=-toGL(y,yMax)

        toDraw.append([x,y])
        wellStr = "%0.f %0.f" % (x,y)
        drawStr.append(wellStr)


  ar=Array[Vector3]([Vector3(well[0],well[1],sp) for well in toDraw])

  return Tuple.Create(" ".join(allwells),ar,Single(bgCol),Single(DotCol)," ".join(drawStr))

def unload():
  global allCoor,xMax,yMax,oldCoor,fr,posList
  allCoor=None
  xMax=None
  yMax=None
  oldCoor=None
  fr=None
  posList=None</q2:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q3:TextWriter">
          <q3:FileName>E:\00_bonsai_ffmpeg_out\PositionTxt_allROI.txt</q3:FileName>
          <q3:Suffix>Timestamp</q3:Suffix>
          <q3:Buffered>true</q3:Buffered>
          <q3:Overwrite>false</q3:Overwrite>
          <q3:Append>false</q3:Append>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q4:BackgroundSubtraction">
          <q4:BackgroundFrames>120</q4:BackgroundFrames>
          <q4:AdaptationRate>0.0005</q4:AdaptationRate>
          <q4:ThresholdValue>0</q4:ThresholdValue>
          <q4:ThresholdType>ToZero</q4:ThresholdType>
          <q4:SubtractionMethod>Dark</q4:SubtractionMethod>
        </Combinator>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>pairList</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Name>splitPairList</q2:Name>
              <q2:Script>@returns(list)
def process(value):
  pairList=[]
  for l in value:
    pairList.append([int(x) for x in l.split()])
  return pairList</q2:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="ToList" />
            </Expression>
            <Expression xsi:type="q3:CsvReader">
              <q3:FileName>E:\00_bonsai_ffmpeg_out\pairLists\PL_16_eachWithSelf.txt</q3:FileName>
              <q3:ScanPattern>%s</q3:ScanPattern>
              <q3:SkipRows>0</q3:SkipRows>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfStringCsvReader">
              <MemberName>FileName</MemberName>
              <Name>FileName</Name>
              <Value>testExperiment\pairLists\PL_16_eachWithLast.csv</Value>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="SelectMany">
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item1</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q4:Crop">
                <q4:RegionOfInterest>
                  <q4:X>1636</q4:X>
                  <q4:Y>844</q4:Y>
                  <q4:Width>382</q4:Width>
                  <q4:Height>382</q4:Height>
                </q4:RegionOfInterest>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="CombineLatest" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Concat" />
            </Expression>
            <Expression xsi:type="InputMapping">
              <PropertyMappings>
                <Property name="RegionOfInterest" selector="Source.Item2.Item1,Source.Item2.Item2,Source.Item2.Item3,Source.Item2.Item3" />
              </PropertyMappings>
              <Selector>Source.Item1</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q4:BinaryRegionAnalysis" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q4:FindContours">
                <q4:Mode>External</q4:Mode>
                <q4:Method>ChainApproxNone</q4:Method>
                <q4:Offset>
                  <q4:X>0</q4:X>
                  <q4:Y>0</q4:Y>
                </q4:Offset>
                <q4:MinArea>4</q4:MinArea>
                <q4:MaxArea>500</q4:MaxArea>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q4:LargestBinaryRegion" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="ToList" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item3</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item4</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q5:HeadingFromOrientation" />
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>0</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>0</From>
              <To>13</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>0</From>
              <To>14</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>12</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>9</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>5</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>10</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>8</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>10</From>
              <To>15</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>12</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>12</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>13</From>
              <To>12</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>14</From>
              <To>12</To>
              <Label>Source4</Label>
            </Edge>
            <Edge>
              <From>15</From>
              <To>11</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="CombineLatest" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q4:ImageWriter">
          <q4:Path>\\.\pipe\p1</q4:Path>
          <q4:Suffix>None</q4:Suffix>
          <q4:Overwrite>false</q4:Overwrite>
        </Combinator>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>ffmpeg</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="q2:PythonSource">
              <q2:Script>import datetime
@returns(str)
def generate():
  currentTime=datetime.datetime.now()
  yield currentTime.strftime('%Y%m%d%H%M%S')</q2:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>30</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Script>import subprocess as sp
import datetime

@returns(bool)
def process(inputs):

  vid_width=str(inputs.Item5)
  vid_height=str(inputs.Item6)
  vid_rate=str(inputs.Item1)
  currentTime=inputs.Item2
  cam_id=str(inputs.Item3)
  codec_q=str(inputs.Item4)

  cmd='c:\\ffmpeg\\bin\\ffmpeg.exe -y -f rawvideo -vcodec rawvideo -s '+vid_width+'x'+vid_height+' -r '+vid_rate+' -pix_fmt gray -i \\\\.\\pipe\\p1 -q:v '+codec_q+' -vcodec mpeg4 -vtag xvid e:\\00_bonsai_ffmpeg_out\\out_id'+cam_id+'_'+vid_rate+'fps'+'_'+currentTime+'.avi'
  sp.Popen(cmd)
  return True</q2:Script>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>5</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>0</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfInt32IntProperty">
              <MemberName>Value</MemberName>
              <Name>codec q</Name>
              <Value>5</Value>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfInt32IntProperty">
              <MemberName>Value</MemberName>
              <Name>cam id</Name>
              <Value>0</Value>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfInt32IntProperty">
              <MemberName>Value</MemberName>
              <Name>vid fps</Name>
              <Value>30</Value>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Width</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Height</Selector>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>2</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>2</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>11</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>12</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>2</To>
              <Label>Source5</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>2</To>
              <Label>Source4</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>10</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>2</To>
              <Label>Source6</Label>
            </Edge>
            <Edge>
              <From>12</From>
              <To>2</To>
              <Label>Source7</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item1</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item2,Source.Item3,Source.Item4</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q6:UpdateFrame" />
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>GLdraw</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:DrawArrays">
                <q6:ShaderName>Particles</q6:ShaderName>
                <q6:DrawMode>Points</q6:DrawMode>
                <q6:Usage>DynamicDraw</q6:Usage>
                <q6:VertexAttributes>
                  <q6:VertexAttributeMapping>
                    <q6:Size>3</q6:Size>
                    <q6:Normalized>false</q6:Normalized>
                    <q6:Type>Float</q6:Type>
                  </q6:VertexAttributeMapping>
                </q6:VertexAttributes>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:UpdateUniform">
                <q6:UniformName>colBG</q6:UniformName>
                <q6:ShaderName>bg</q6:ShaderName>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:UpdateUniform">
                <q6:UniformName>colDot</q6:UniformName>
                <q6:ShaderName>Particles</q6:ShaderName>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2.Item1</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:UpdateUniform">
                <q6:UniformName>colBG</q6:UniformName>
                <q6:ShaderName>Particles</q6:ShaderName>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2.Item3</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2.Item2</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="CombineLatest" />
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source2</Name>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>3</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>7</To>
              <Label>Source2</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q4:Threshold">
          <q4:ThresholdValue>15</q4:ThresholdValue>
          <q4:MaxValue>255</q4:MaxValue>
          <q4:ThresholdType>Binary</q4:ThresholdType>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Zip" />
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>trajectory file</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="RepeatCount">
                <Count>30</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="q3:CsvReader">
              <q3:FileName>E:\00_bonsai_ffmpeg_out\trajectories\kineticParameters_03d_smallSlowLoopy_c.csv</q3:FileName>
              <q3:ScanPattern>%s,%f,%f,%f,%f,%f</q3:ScanPattern>
              <q3:SkipRows>0</q3:SkipRows>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfInt32RepeatCount">
              <MemberName>Count</MemberName>
              <Name>Count</Name>
              <Value>30</Value>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfStringCsvReader">
              <MemberName>FileName</MemberName>
              <Name>FileName</Name>
              <Value>testExperiment\trajectories\KnotTrajectory_6Sizes.csv</Value>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>0</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>ROI file</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="ToList" />
            </Expression>
            <Expression xsi:type="q3:CsvReader">
              <q3:FileName>E:\00_bonsai_ffmpeg_out\ROIdef2018-05-03T10_31_23.csv</q3:FileName>
              <q3:ScanPattern>%i %i %i %i %i %i</q3:ScanPattern>
              <q3:SkipRows>0</q3:SkipRows>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfStringCsvReader">
              <MemberName>FileName</MemberName>
              <Name>FileName</Name>
              <Value>testExperiment\ROIdef2018-05-02T09_16_29.csv</Value>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="q2:ExpressionTransform">
        <q2:Expression>(it%10)&lt;-5</q2:Expression>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Timer">
          <DueTime>PT0S</DueTime>
          <Period>PT1S</Period>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="CombineLatest" />
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>drawGrating</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:DrawMesh">
                <q6:ShaderName>Waveform</q6:ShaderName>
                <q6:MeshName>Waveform</q6:MeshName>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:UpdateUniform">
                <q6:UniformName>frequency</q6:UniformName>
                <q6:ShaderName>Waveform</q6:ShaderName>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:UpdateVertexBuffer">
                <q6:MeshName>Waveform</q6:MeshName>
                <q6:DrawMode>Points</q6:DrawMode>
                <q6:Usage>DynamicDraw</q6:Usage>
                <q6:VertexAttributes>
                  <q6:VertexAttributeMapping>
                    <q6:Size>2</q6:Size>
                    <q6:Normalized>false</q6:Normalized>
                    <q6:Type>Double</q6:Type>
                  </q6:VertexAttributeMapping>
                </q6:VertexAttributes>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:UpdateUniform">
                <q6:UniformName>phase</q6:UniformName>
                <q6:ShaderName>Waveform</q6:ShaderName>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="FloatProperty">
                <Value>20</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item1</Selector>
            </Expression>
            <Expression xsi:type="q2:ExpressionTransform">
              <q2:Expression>single(it)</q2:Expression>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="CombineLatest" />
            </Expression>
            <Expression xsi:type="Accumulate" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Take">
                <Count>5</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Script>import clr
clr.AddReference("OpenTK")
from OpenTK import Vector2, Vector3
from System import Array, Single, Random,Tuple
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *

xMax=2048.0 #relevant for openGL scaling
yMax=1280.0

def transf(x,y,hArr):

  h = Mat.FromArray(hArr, 3, 3, Depth.F64, 1)

  values1 = Array[float]([x,y])
  values2 = Array[float]([1,1])

  point = Mat.FromArray(values1, 1, 1, Depth.F64,2)
  out = Mat.FromArray(values2, 1, 1, Depth.F64,2)

  CV.PerspectiveTransform(point,out,h)

  x=out.Item[0].Val0
  y=out.Item[0].Val1

  return x,y

@returns(Mat)
def process(value):
  hArr =value.Item2


  x = [r.Item4 for r in value.Item1]
  y = [r.Item5 for r in value.Item1]
  scale=xMax/52.
  for i in range(len(x)):
    
    
    
    x[i]=x[i]-(x[i]-xMax/2.)/(79*scale)
    y[i]=y[i]-(y[i]-yMax/2.)/(79*scale)
    x[i],y[i]=transf(x[i],y[i],hArr)
    x[i]=(2*(x[i]-xMax/2))/xMax
    y[i]=(-2*(y[i]-yMax/2))/yMax

  
  xy=sum(zip(x, y), ()) 

  xyA = Array[float](xy)


  xym = Mat.FromArray(xyA, len(value.Item1), 2, Depth.F64, 1)

  return xym</q2:Script>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2.EventArgs.Time</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item3,Source.Item4</Selector>
            </Expression>
            <Expression xsi:type="Condition">
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                  <Expression xsi:type="MemberSelector">
                    <Selector>Source.Item1</Selector>
                  </Expression>
                </Nodes>
                <Edges>
                  <Edge>
                    <From>0</From>
                    <To>2</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>2</From>
                    <To>1</To>
                    <Label>Source1</Label>
                  </Edge>
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="FloatProperty">
                <Value>5</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="Multiply" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>16</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>15</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>7</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>10</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>8</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>9</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>12</From>
              <To>10</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>13</From>
              <To>11</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>13</From>
              <To>12</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>14</From>
              <To>13</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>15</From>
              <To>16</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>16</From>
              <To>17</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>17</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>calibration file</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Name>split_hMat</q2:Name>
              <q2:Script>from System import Array
@returns(Array)
def process(value):
  return Array[float]([float(el) for el in value.split()])</q2:Script>
            </Expression>
            <Expression xsi:type="q3:CsvReader">
              <q3:FileName>E:\00_bonsai_ffmpeg_out\calibrationOut2018-05-03T10_32_23.csv</q3:FileName>
              <q3:ScanPattern>%s</q3:ScanPattern>
              <q3:SkipRows>0</q3:SkipRows>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfStringCsvReader">
              <MemberName>FileName</MemberName>
              <Name>FileName</Name>
              <Value>testExperiment\calibrationOut2018-05-02T09_18_04.csv</Value>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
    </Nodes>
    <Edges>
      <Edge>
        <From>0</From>
        <To>1</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>1</From>
        <To>4</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>2</From>
        <To>10</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>2</From>
        <To>11</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>4</From>
        <To>14</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>4</From>
        <To>9</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>5</From>
        <To>7</To>
        <Label>Source3</Label>
      </Edge>
      <Edge>
        <From>6</From>
        <To>15</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>7</From>
        <To>6</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>9</From>
        <To>8</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>10</From>
        <To>3</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>11</From>
        <To>13</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>12</From>
        <To>20</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>12</From>
        <To>13</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>14</From>
        <To>7</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>15</From>
        <To>2</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>16</From>
        <To>15</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>17</From>
        <To>7</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>17</From>
        <To>20</To>
        <Label>Source3</Label>
      </Edge>
      <Edge>
        <From>18</From>
        <To>20</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>19</From>
        <To>18</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>20</From>
        <To>21</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>22</From>
        <To>7</To>
        <Label>Source4</Label>
      </Edge>
      <Edge>
        <From>22</From>
        <To>20</To>
        <Label>Source4</Label>
      </Edge>
    </Edges>
  </Workflow>
  <ExtensionTypes>
    <Type>Bonsai.uEye.uEyeCapture, Bonsai.uEye, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonTransform, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.TextWriter, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BackgroundSubtraction, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.ToList, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.CsvReader, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedProperty`2[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Bonsai.IO.CsvReader, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Crop, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.CombineLatest, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Concat, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.InputMappingBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BinaryRegionAnalysis, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FindContours, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.LargestBinaryRegion, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Zip, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.joh.Vision.HeadingFromOrientation, BonsaiPackage5, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.ImageWriter, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonSource, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.IntProperty, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedProperty`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Bonsai.Expressions.IntProperty, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.UpdateFrame, Bonsai.Shaders, Version=0.18.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.DrawArrays, Bonsai.Shaders, Version=0.18.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.UpdateUniform, Bonsai.Shaders, Version=0.18.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Threshold, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.RepeatCount, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedProperty`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Bonsai.Reactive.RepeatCount, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.ExpressionTransform, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Timer, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.DrawMesh, Bonsai.Shaders, Version=0.18.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.UpdateVertexBuffer, Bonsai.Shaders, Version=0.18.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.FloatProperty, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.AccumulateBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Take, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.MultiplyBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
  </ExtensionTypes>
</WorkflowBuilder>